package CollectionsEx;

public class ArrayListEx {
//	Arraylist methods and constructors:
	/* public java.util.ArrayList(int);
	  public java.util.ArrayList();
	  public java.util.ArrayList(java.util.Collection<? extends E>);
	  public void trimToSize();
	  public void ensureCapacity(int);
	  public int size();
	  public boolean isEmpty();
	  public boolean contains(java.lang.Object);
	  public int indexOf(java.lang.Object);
	  public int lastIndexOf(java.lang.Object);
	  public java.lang.Object clone();
	  public java.lang.Object[] toArray();
	  public <T> T[] toArray(T[]);
	  E elementData(int);
	  public E get(int);
	  public E set(int, E);
	  public boolean add(E);
	  public void add(int, E);
	  public E remove(int);
	  public boolean remove(java.lang.Object);
	  public void clear();
	  public boolean addAll(java.util.Collection<? extends E>);
	  public boolean addAll(int, java.util.Collection<? extends E>);
	  protected void removeRange(int, int);
	  public boolean removeAll(java.util.Collection<?>);
	  public boolean retainAll(java.util.Collection<?>);
	  public java.util.ListIterator<E> listIterator(int);
	  public java.util.ListIterator<E> listIterator();
	  public java.util.Iterator<E> iterator();
	  public java.util.List<E> subList(int, int);
	  static void subListRangeCheck(int, int, int);
	  public void forEach(java.util.function.Consumer<? super E>);
	  public java.util.Spliterator<E> spliterator();
	  public boolean removeIf(java.util.function.Predicate<? super E>);
	  public void replaceAll(java.util.function.UnaryOperator<E>);
	  public void sort(java.util.Comparator<? super E>);
	  static int access$100(java.util.ArrayList);
	//LinkedList methods;
	transient int size;
	  transient java.util.LinkedList$Node<E> first;
	  transient java.util.LinkedList$Node<E> last;
	  public java.util.LinkedList();
	  public java.util.LinkedList(java.util.Collection<? extends E>);
	  void linkLast(E);
	  void linkBefore(E, java.util.LinkedList$Node<E>);
	  E unlink(java.util.LinkedList$Node<E>);
	  public E getFirst();
	  public E getLast();
	  public E removeFirst();
	  public E removeLast();
	  public void addFirst(E);
	  public void addLast(E);
	  public boolean contains(java.lang.Object);
	  public int size();
	  public boolean add(E);
	  public boolean remove(java.lang.Object);
	  public boolean addAll(java.util.Collection<? extends E>);
	  public boolean addAll(int, java.util.Collection<? extends E>);
	  public void clear();
	  public E get(int);
	  public E set(int, E);
	  public void add(int, E);
	  public E remove(int);
	  java.util.LinkedList$Node<E> node(int);
	  public int indexOf(java.lang.Object);
	  public int lastIndexOf(java.lang.Object);
	  public E peek();
	  public E element();
	  public E poll();
	  public E remove();
	  public boolean offer(E);
	  public boolean offerFirst(E);
	  public boolean offerLast(E);
	  public E peekFirst();
	  public E peekLast();
	  public E pollFirst();
	  public E pollLast();
	  public void push(E);
	  public E pop();
	  public boolean removeFirstOccurrence(java.lang.Object);
	  public boolean removeLastOccurrence(java.lang.Object);
	  public java.util.ListIterator<E> listIterator(int);
	  public java.util.Iterator<E> descendingIterator();
	  public java.lang.Object clone();
	  public java.lang.Object[] toArray();
	  public <T> T[] toArray(T[]);
	  public java.util.Spliterator<E> spliterator()*/
}
